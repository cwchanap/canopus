[workspace]
resolver = "2"
members = [
    "core",
    "ipc",
    "daemon",
    "cli",
    "schema",
    "xtask",
]

[workspace.package]
version = "0.1.0"
edition = "2021"
authors = ["Your Name <your.email@example.com>"]
license = "MIT OR Apache-2.0"
repository = "https://github.com/yourusername/canopus"

[workspace.dependencies]
# Internal crates - use package name for core to avoid std::core conflicts
canopus-core = { path = "core" }
ipc = { path = "ipc" }
daemon = { path = "daemon" }
cli = { path = "cli" }
schema = { path = "schema" }

# Async runtime
tokio = { version = "1.0", features = ["full"] }

# Serialization
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"

# CLI
clap = { version = "4.0", features = ["derive"] }

# Error handling
anyhow = "1.0"
thiserror = "1.0"

# Logging
tracing = "0.1"
tracing-subscriber = { version = "0.3", features = ["env-filter"] }

# Schema generation
schemars = { version = "0.8", features = ["derive"] }

# Testing
cargo-nextest = { version = "0.9" }

# Workspace lints configuration
[workspace.lints.rust]
# Rust lints
unsafe_code = "forbid"
missing_docs = "warn"
missing_debug_implementations = "warn"
missing_copy_implementations = "warn"
trivial_casts = "warn"
trivial_numeric_casts = "warn"
unused_import_braces = "warn"
unused_qualifications = "warn"
unused_extern_crates = "warn"
unused_lifetimes = "warn"
unreachable_pub = "warn"
bad_style = "warn"
dead_code = "warn"
improper_ctypes = "warn"
non_shorthand_field_patterns = "warn"
no_mangle_generic_items = "warn"
overflowing_literals = "warn"
path_statements = "warn"
patterns_in_fns_without_body = "warn"
private_in_public = "warn"
unconditional_recursion = "warn"
unused = { level = "warn", priority = -1 }
unused_allocation = "warn"
unused_comparisons = "warn"
unused_parens = "warn"
while_true = "warn"

[workspace.lints.clippy]
# Clippy lint categories
all = { level = "warn", priority = -1 }
pedantic = { level = "warn", priority = -1 }
nursery = { level = "warn", priority = -1 }
cargo = { level = "warn", priority = -1 }

# Specific clippy lints
missing_errors_doc = "allow"        # Too noisy for now
missing_panics_doc = "allow"        # Too noisy for now
module_name_repetitions = "allow"   # Common in workspace structure
must_use_candidate = "allow"        # Too noisy for now

# Performance lints
inefficient_to_string = "warn"
large_enum_variant = "warn"
large_stack_arrays = "warn"
large_types_passed_by_value = "warn"

# Correctness lints  
clone_on_ref_ptr = "warn"
enum_glob_use = "warn"
exit = "warn"
expect_used = "warn"
get_unwrap = "warn"
if_then_some_else_none = "warn"
implicit_clone = "warn"
imprecise_flops = "warn"
indexing_slicing = "warn"
integer_arithmetic = "warn"
lossy_float_literal = "warn"
panic = "warn"
panic_in_result_fn = "warn"
string_slice = "warn"
todo = "warn"
unimplemented = "warn"
unreachable = "warn"
unwrap_in_result = "warn"
unwrap_used = "warn"

# Style lints
cognitive_complexity = "warn"
too_many_arguments = "warn"
too_many_lines = "warn"
type_complexity = "warn"
